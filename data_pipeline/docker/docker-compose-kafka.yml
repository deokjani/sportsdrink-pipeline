version: '3.8'  

services:
  # 1️⃣ Zookeeper (Kafka의 메타데이터 관리)
  zookeeper:
    image: bitnami/zookeeper:3.8
    container_name: zookeeper
    restart: unless-stopped
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/bitnami/zookeeper
    networks:
      - elk
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 2️⃣ Kafka (스트리밍 메시지 브로커)
  kafka:
    build: ./kafka  # ✅ Kafka용 Dockerfile이 있는 디렉토리에서 빌드
    container_name: kafka
    image: bitnami/kafka-custom:3.5.1
    restart: unless-stopped
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
      KAFKA_LISTENERS: "PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"  # ✅ 토픽 자동 생성 활성화
      ALLOW_PLAINTEXT_LISTENER: "yes"
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - elk
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  elk:
    driver: bridge

volumes:
  zookeeper_data:
  kafka_data:

# 6
# docker-compose -f docker-compose-kafka.yml down
# docker-compose -f docker-compose-kafka.yml build --no-cache
# docker-compose -f docker-compose-kafka.yml up -d
