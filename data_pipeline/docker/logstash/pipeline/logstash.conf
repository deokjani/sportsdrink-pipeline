input {
  beats {
    port => 5044
  }
}

filter {
  grok {
    match => {
      "message" => [
        # ✅ DAG 실행 성공/실패 로그
        "\[%{TIMESTAMP_ISO8601:log_timestamp}\] \{%{DATA:file}:%{NUMBER:line}\} %{LOGLEVEL:log_level} - Marking task as %{WORD:task_status}\. dag_id=%{DATA:dag_id}, task_id=%{DATA:task_id}, execution_date=%{DATA:execution_date}, start_date=%{DATA:start_date}, end_date=%{DATA:end_date}",

        # ✅ PythonOperator 에러 로그 메시지 (exception 추출 포함)
        "\[%{TIMESTAMP_ISO8601:log_timestamp}\] \{%{DATA:file}:%{NUMBER:line}\} %{LOGLEVEL:log_level} - Task failed with exception.*?%{GREEDYDATA:exception_trace}"
      ]
    }
  }

  date {
    match => ["log_timestamp", "yyyy-MM-dd'T'HH:mm:ss.SSSZ"]
    target => "@timestamp"
  }

  mutate {
    rename => { "log_level" => "log.level" }
    rename => { "task_status" => "task.status" }
  }

  if "Task failed with exception" in [message] {
    mutate {
      add_field => {
        "task.status" => "FAILED"
      }
    }
  }
}

output {
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "airflow-logs-%{+yyyy.MM.dd}"
  }

  stdout { codec => rubydebug }
}
